--------------------------------------------------------------------------------------------------------------
/*Создание базы данных и четырех таблиц в ней. Обозначение связей между таблицами с помощью ключей*/

sqlite>.open teachers.db

sqlite> CREATE TABLE teachers (
	> teacher_id INTEGER PRIMARY KEY AUTOINCREMENT,
	> name TEXT NOT NULL,
	> surname TEXT NOT NULL,
	> email TEXT NOT NULL UNIQUE
	> );

sqlite> CREATE TABLE courses (
	>course_id INTEGER PRIMARY KEY AUTOINCREMENT,
	>name TEXT NOT NULL
	>);

sqlite> CREATE TABLE streams (
	> id INTEGER PRIMARY KEY AUTOINCREMENT,
	> course_id INTEGER NOT NULL,
	> number INTEGER NOT NULL UNIQUE,
	> start_date TEXT NOT NULL,
	> students_amount INTEGER NOT NULL,
	> FOREIGN KEY (course_id) REFERENCES courses(course_id)
	> );

sqlite> CREATE TABLE grades (
	> teacher_id INTEGER NOT NULL,
	> stream_id INTEGER NOT NULL,
	> grade REAL NOT NULL,
	> PRIMARY KEY(teacher_id, stream_id),
	> FOREIGN KEY (teacher_id) REFERENCES teachers (teacher_id),
	> FOREIGN KEY (stream_id) REFERENCES streams(id)
	> );
--------------------------------------------------------------------------------------------------------------

sqlite> ALTER TABLE grades RENAME TO final_grades; //переименование таблицы
sqlite> ALTER TABLE final_grades RENAME COLUMN grade TO final_grade; //переименование столбца
sqlite> ALTER TABLE streams ADD COLUMN finished_at TEXT NOT NULL; //добавление столбца

/*Заполнение данными*/

sqlite> INSERT INTO teachers (name, surname, email) VALUES
   ...> ('Николай', 'Савельев', 'saveliev.n@mail.ru'),
   ...> ('Наталья', 'Петрова', 'petrova.n@yandex.ru'),
   ...> ('Елена', 'Малышева', 'malisheva.e@google.com');

sqlite> INSERT INTO courses (name) VALUES
   ...> ('Базы данных'),
   ...> ('Основы Python'),
   ...> ('Linux.Рабочая станция');

sqlite> INSERT INTO streams (course_id, number, started_at, students_amount, finished_at) VALUES
   ...> (3, 165, '18.08.2020', 34, '0.0.0000'),
   ...> (2, 178, '02.10.2020', 37, '0.0.0000'),
   ...> (1, 203, '12.11.2020', 35, '0.0.0000'),
   ...> (1, 210, '02.12.2020', 41, '0.0.0000');

sqlite> INSERT INTO final_grades (teacher_id, stream_id, final_grade) VALUES
   ...> (3, 1, 4.7),
   ...> (2, 2, 4.9),
   ...> (1, 3, 4.8),
   ...> (1, 4, 4.9);
--------------------------------------------------------------------------------------------------------------

sqlite> SELECT * FROM teachers WHERE surname = 'Петрова'; //выборка данных
sqlite> SELECT * FROM final_grades ORDER BY final_grade LIMIT 1; //сортировка по возрастанию и органичение на вывод(одна строка)
sqlite> SELECT * FROM final_grades ORDER BY final_grade DESC; //сортировка по убыванию
sqlite> SELECT DISTINCT (teacher_id) FROM final_grades; //возвращение уникального значения
sqlite> SELECT * FROM streams WHERE number != 178 AND students_amount < 40; //поиск с несколькими условиями
sqlite> SELECT number FROM streams WHERE students_amount IN (34,35,41); //поиск по списку значений
sqlite> SELECT number FROM streams WHERE students_amount = NULL; //поиск на пустое значение
sqlite> SELECT * FROM courses WHERE name LIKE '%linux%'; //поиск по шаблону

sqlite> UPDATE streams SET started_at = SUBSTR(started_at, 7, 4) || '-' || SUBSTR(started_at, 4, 2) || '-' || 
SUBSTR (started_at, 1, 2); // приведение формата даты к правильному виду

sqlite> SELECT AVG (final_grade) FROM final_grades; //нахождение среднего значения
sqlite> SELECT course_id, SUM(students_amount) FROM streams GROUP BY course_id; //сумма значений столбца с группировкой по индентификатору

--------------------------------------------------------------------------------------------------------------
/*Многотабличный запрос*/

sqlite> SELECT
   ...> (SELECT name FROM teachers WHERE teacher_id = teacher_id) AS teacher_name,
   ...> (SELECT surname FROM teachers WHERE teacher_id  = teacher_id) AS teacher_surname,
   ...> (SELECT name FROM courses WHERE course_id =
(x1...> (SELECT course_id FROM streams WHERE id = stream_id)
(x1...> ) AS course_name,
   ...> final_grade
   ...> FROM final_grades;

--------------------------------------------------------------------------------------------------------------
/*Объединение JOIN*/

sqlite> SELECT * FROM teachers JOIN final_grades WHERE teachers.teacher_id = final_grades.teacher_id; //внутреннее объединение(inner join)
sqlite> SELECT * FROM teachers LEFT JOIN final_grades WHERE teachers.teacher_id = final_grades.teacher_id; //левое внешнее объединение(left join)
sqlite> SELECT * FROM teachers RIGHT JOIN final_grades WHERE teachers.teacher_id = final_grades.teacher_id; //правое внешнее объединение (right join)


